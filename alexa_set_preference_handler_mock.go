// Code generated by MockGen. DO NOT EDIT.
// Source: alexa_set_preference_handler.go

// Package main is a generated GoMock package.
package main

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockSetPreferenceHandler is a mock of SetPreferenceHandler interface
type MockSetPreferenceHandler struct {
	ctrl     *gomock.Controller
	recorder *MockSetPreferenceHandlerMockRecorder
}

// MockSetPreferenceHandlerMockRecorder is the mock recorder for MockSetPreferenceHandler
type MockSetPreferenceHandlerMockRecorder struct {
	mock *MockSetPreferenceHandler
}

// NewMockSetPreferenceHandler creates a new mock instance
func NewMockSetPreferenceHandler(ctrl *gomock.Controller) *MockSetPreferenceHandler {
	mock := &MockSetPreferenceHandler{ctrl: ctrl}
	mock.recorder = &MockSetPreferenceHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSetPreferenceHandler) EXPECT() *MockSetPreferenceHandlerMockRecorder {
	return m.recorder
}

// SetBusPreference mocks base method
func (m *MockSetPreferenceHandler) SetBusPreference(arg0 context.Context, arg1 AlexaRequest) (AlexaTextResponse, error) {
	ret := m.ctrl.Call(m, "SetBusPreference", arg0, arg1)
	ret0, _ := ret[0].(AlexaTextResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetBusPreference indicates an expected call of SetBusPreference
func (mr *MockSetPreferenceHandlerMockRecorder) SetBusPreference(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBusPreference", reflect.TypeOf((*MockSetPreferenceHandler)(nil).SetBusPreference), arg0, arg1)
}
